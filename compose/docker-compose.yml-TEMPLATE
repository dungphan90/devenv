# docker-compose file for devenv based images and containers

# You need to replace <USER>, <EXP>, <SL>, and <NAME> (each several times)
#
#  <USER> should be your Mac username
#  <CVMFS> Is your colon separated list of CVMFS volumes to mount
#  <SL> is the version of Scientific Linux (should be either 6 or 7)
#  <NAME> is a name for identifying the containers you'll create.
#         The name of the development area may be a good choice
#
#  Here is an example command to do these replacements
#  sed -e 's/<USER>/lyon/g' -e 's/<CVMFS>/gm2.opensciencegrid.org/g' -e 's/<SL>/7/g' -e 's/<NAME>/laserDev/g' docker-compose.yml-TEMPLATE > docker-compose.yml
#
#  Perhaps remove the comments above after replacement

# Quick list of commands
#  devenv-<NAME>: Long lived container with CVMFS
#      docker-compose up -d devenv-<NAME>           # Start
#      docker-compose logs -f devenv-<NAME>         # Check start of CVMFS
#      docker-compose exec devenv-<NAME> /bin/bash  # Shell into the container
#      docker-compose down                          # Stop


## We'll use YAML anchors and aliases to avoid repeating chunks of the settings configurations
## See https://nickjanetakis.com/blog/docker-tip-82-using-yaml-anchors-and-x-properties-in-docker-compose and
## and https://medium.com/@kinghuang/docker-compose-anchors-aliases-extensions-a1e4105d70bd for more info

version: '3.7'

# Definitions -----

x-environment: &default-environment
  environment:
    - CVMFS_EXP=<CVMFS>
    - DISPLAY=docker.for.mac.localhost:0

x-worker: &default-worker
  security_opt: # options needed for gdb debugging
    - seccomp:unconfined
    - apparmor:unconfined
  cap_add:      # also needed for gdb
    - SYS_PTRACE
  privileged: true
  ports:
    - 127.0.0.1:19999:19999  # netdata
  command: /bin/bash
  
services:

  # devenv-<NAME>
  devenv-<NAME>:
    image: lyonfnal/devenv_cvmfs:sl<SL>
    hostname: devenv-<NAME>
    <<: *default-worker
    <<: *default-environment 
    volumes:
      - cvmfs_cache_<NAME>:/var/lib/cvmfs
      - workdir:/Users/<USER>
      - slash_root_<NAME>:/root

# Note - if you are adding additional services that will run CVMFS, then each will need their own
#        separate cvmfs_cache volume. 

volumes:
  workdir:           # /Users/<USER>
    driver: local
    driver_opts:
      type: nfs
      o: addr=host.docker.internal,rw,nolock,hard,nointr,nfsvers=3
      device: ":/System/Volumes/Data/Users/<USER>"

  slash_root_<NAME>:        # /root
    external: true

  cvmfs_cache_<NAME>:       # Cache for non-NFS served CVMFS
    external: true
  
  # If you want additional cvmfs_cache volumes, add them here
